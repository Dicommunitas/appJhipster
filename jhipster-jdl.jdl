
application {
  config {
    applicationType gateway
    baseName controleAmostraGateway
    serverPort 8080
    packageName com.operacional.controleamostragateway
    
    //Mecanismo para balanceamento 
    //de carga de servidores
    serviceDiscoveryType eureka
    
    authenticationType jwt
    // **** não consegui fazer funcionar oauth2 *****
    //authenticationType oauth2
    prodDatabaseType mysql
    devDatabaseType mysql
    
    //Mecanismo de cache para 
    //o banco de dados
    cacheProvider hazelcast
    enableHibernateCache true
    
    buildTool maven
    
    //Mecanismo para facilitar buscas
    //no banco de dados (não funciona com Hibernate)
    // **** não consegui fazer funcionar *****
    //searchEngine elasticsearch
    //enableHibernateCache false
    
    
    // Para trabalhar com mensageria em tempo real
    //messageBroker kafka
    
    //Swagger Codegen is an open source project 
    //which allows generation of API client 
    //libraries (SDK generation), server stubs, 
    //and documentation automatically from an 
    //OpenAPI Specification.
    enableSwaggerCodegen true
    
    clientFramework angularX
    
    //Do you want to generate the admin UI?
    //withAdminUi true
    
    //Bootswatch themes for Bootstrap
    clientTheme cosmo
    clientThemeVariant dark
    
    nativeLanguage 	pt-br
    languages 	[pt-br, en]

	// gatling - teste de performance (teste de carga)
	// cucumber - teste BDD (Behavior-Driven Development
    // - Desenvolvimento Orientado por Comportamento) 
	// protractor - teste de aplicação AngularJS end-to-end
	// cypress - teste de aplicação JavaScript End to End
    testFrameworks [ cypress, gatling, cucumber]
    //cypressCoverage true
    
  }
  entities *
  
  // Criação da classe de validação para 
  // as regras de negócios
  service * with serviceImpl
  dto A with mapstruct
  
}

application {
  config {
    applicationType microservice
    baseName controleAmostraMicroservice
    serverPort 8081
    packageName com.operacional.controleamostramicroservice
    
    serviceDiscoveryType eureka  
    authenticationType jwt
    prodDatabaseType mysql
    devDatabaseType mysql
    buildTool maven
    enableSwaggerCodegen true
    nativeLanguage 	pt-br
    languages 	[pt-br, en]
    testFrameworks [ gatling, cucumber]
  }
  entities A, B
  
  // Verificar opção de busca
  //search A with elasticsearch
  
  // Criação da classe de validação para 
  // as regras de negócios
  // service A with serviceImpl
}

application {
  config {
    baseName myApp2
    applicationType microservice
    packageName com.operacional.myapp2
    serviceDiscoveryType eureka   
    authenticationType jwt
    prodDatabaseType mysql
    devDatabaseType mysql
    buildTool maven
    enableSwaggerCodegen true
    nativeLanguage 	pt-br
    languages 	[pt-br, en]
    testFrameworks [ gatling, cucumber]
  }
  entities C
}

entity A {}

entity B {}

entity C {}

entity D {}

relationship OneToMany {
  A to B
}

// Usar um dos comandos abaixo para gerar o código.
// jhipster jdl ./my-jdl-file.jdl 
// jhipster jdl ./my-jdl-file.jdl --json-only
// By default jdl regenerates only entities which have changed, 
// if you want all your entities to be regenerated
// then pass in the --force flag. Please note that this 
// will overwrite all your local changes to the entity files
// jhipster jdl ./my-jdl-file.jdl --force
    
// Ao término da criação da aplicação terá um arquivo
// .yo-rc.json
// este aquivo mostra todas as opções escolhidas durante a criação do projeto

// Alterar a senha no arquivo de configuração do banco de dados em:
// .../src/main/resources/config/application-dev OU prod.yml

// Usar o comando abaixo dentro do diretório raiz do projeto para iniciar o servidor frontend.
// npm start

// Usar o comando abaixo dentro do diretório raiz do projeto para iniciar o servidor backend.
// ./mvnw

// Cypress/Protractor
// UI integration tests are done with Cypress or Protractor,
// and are located in the src/test/javascript/e2e folder.
// Those tests will launch a Web browser and use the application
// like a real user would do, so you need to have a real application
// running, with its database set-up.
// Those tests can be run using: 
// npm run e2e.

// As regras de negócios ficam dentro de 
// /src/main/java/.../service
// criar e usar serviceImpl 


// Application “hot restart” with Spring Boot devtools
// Spring Boot devtools is configured by JHipster, 
// and will “hot restart” your application when 
// classes from your project are compiled.
// To use it within Visual Studio Code, you need to:
//    Run your application in a terminal, typically by typing ./mvnw
//    In another terminal, compile your application: ./mvnw compile

